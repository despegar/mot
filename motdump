#!/usr/bin/python

'''
Motdump is a command-line application that dumps the frames as they are received or transmitted, much like as tcpdump 
does with the protocol segments. It features a rich set of filters, that allow to select which frames are dumped.

The command is implemented with this program. The script opens a TCP connection against a Mot context running in the
same host; the context is selected using the TCP port. 

All the filtering and output logic are done in the server-side: the client script merely sends the arguments and then
tunnels the response.
'''

import sys, socket, argparse, signal, textwrap

examples = """\
	Primitive filters:
	
	  port <number>
	  src port <number>
	  dst port <number>
	
	  host <IP address>
	  src host <IP address>
	  dst host <IP address>
	  
	  incoming
	  outgoing
	  
	  type <message type>
	  
	  len > <number>
	  len >= <number>
	  len < <number>
	  len <= <number>
	  
	  attr[<name>]                    (check attribute presence)
	  attr[<name>] == <value>
	  attr[<name>] ~= <regular expresion>
	  
	Filter combination:
	  
	  negation    -- not type heartbeat
	  conjunction -- host <IP address> and not type heartbeat
	  disjunction -- incoming or len > <number>
	  grouping    -- (incoming or len > <number>) and not type heartbeat
	  
	The complete filter syntax is documented (and implemented) in: 
	https://github.com/marianobarrios/mot/blob/master/src/main/scala/mot/dump/DumpFilterParser.scala
	  
	"""
		
parser = argparse.ArgumentParser(
	formatter_class=argparse.RawDescriptionHelpFormatter,
	description="Dump Mot messages. Somewhat like tcpdump, but understanding Mot's format.",
	epilog=textwrap.dedent(examples))

parser.add_argument('-p', '--port', type=int, default=6001, help="port to connect to (default: %(default)s)")
parser.add_argument('-b', '--body', action='store_true', help="show message bodies")
parser.add_argument('-a', '--attributes', action='store_true', help="show attribute values")
parser.add_argument('-s', '--buffer-size', type=int, default=10000, 
	help="buffer in which the messages are filtered, increase if message are discarded (default: %(default)s)")
parser.add_argument('-l', '--length', type=int, default=1024, 
	help="how many characters are shown of each message if option '--body' is used (default: %(default)s)")
parser.add_argument('tokens', nargs='*', metavar="expression", help="filter expression; if absent, all messages are dumped")

args = parser.parse_args()

sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
host = 'localhost'
sock.settimeout(1) # for connect
try:
	sock.connect((host, args.port))
except socket.error, e:
	sys.stderr.write("Cannot connect to %s:%s: %s\n" % (host, args.port, e.strerror))
	sys.exit(1)

sock.sendall('body=%s\n' % args.body)
sock.sendall('length=%s\n' % args.length)
sock.sendall('attributes=%s\n' % args.attributes)
sock.sendall('buffer-size=%s\n' % args.buffer_size)
filter = ' '.join(args.tokens)
if filter != '':
	sock.sendall('filter=%s\n' % filter)
sock.sendall('\n')
buffersize = 4096

def read_loop():
	data = sock.recv(buffersize)
	while data:
		sys.stdout.write(data)
		sys.stdout.flush()
		data = sock.recv(buffersize)

sock.settimeout(None) # data will arrive when it will
try:
	read_loop()
except KeyboardInterrupt:
	# we don't want to process interruptions while handling one 
	signal.signal(signal.SIGINT, signal.SIG_IGN)
	# show final information
	sock.shutdown(socket.SHUT_WR)
	sock.settimeout(1) # summary must arrive quickly
	read_loop()
	print
